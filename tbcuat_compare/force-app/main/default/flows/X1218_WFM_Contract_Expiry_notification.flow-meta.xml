<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <name>Send_Custom_Notification_Action_1</name>
        <label>Send Custom Notification Action 1</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <actionName>customNotificationAction</actionName>
        <actionType>customNotificationAction</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>customNotifTypeId</name>
            <value>
                <elementReference>getCustomNotification.Id</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>recipientIds</name>
            <value>
                <elementReference>buildRecipientList</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>title</name>
            <value>
                <elementReference>NotificationSubject</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>body</name>
            <value>
                <elementReference>NotificationBody</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>targetId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputParameters>
        <nameSegment>customNotificationAction</nameSegment>
        <offset>0</offset>
    </actionCalls>
    <apiVersion>64.0</apiVersion>
    <areMetricsLoggedToDataCloud>false</areMetricsLoggedToDataCloud>
    <decisions>
        <name>HasActiveUsers</name>
        <label>HasActiveUsers?</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>yesHasActiveUsers</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>buildRecipientList</leftValueReference>
                <operator>IsEmpty</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>getCustomNotification</targetReference>
            </connector>
            <label>yesHasActiveUsers</label>
        </rules>
    </decisions>
    <decisions>
        <name>HasGroupMembers</name>
        <label>HasGroupMembers?</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>YesFoundGroupMembers</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetGroupMembersOfPlan</leftValueReference>
                <operator>IsEmpty</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetUserIdsFromGroupMembers</targetReference>
            </connector>
            <label>YesFoundGroupMembers</label>
        </rules>
    </decisions>
    <description>Contains a scheduled notification send to the members of the relevant plan code 30 days before contract is due to expire.</description>
    <environments>Default</environments>
    <interviewLabel>1218 - WFM Contract Expiry notification {!$Flow.CurrentDateTime}</interviewLabel>
    <label>1218 - WFM Contract Expiry notification</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordLookups>
        <name>GetActiveUserIds</name>
        <label>GetActiveUserIds</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>buildRecipientList</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>In</operator>
            <value>
                <elementReference>GetUserIdsFromGroupMembers</elementReference>
            </value>
        </filters>
        <filters>
            <field>IsActive</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <getFirstRecordOnly>false</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>getCustomNotification</name>
        <label>getCustomNotification</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Send_Custom_Notification_Action_1</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>DeveloperName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>ContractExpiryUpcoming</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>CustomNotificationType</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetGroupForPlanCode</name>
        <label>GetGroupForPlanCode</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>GetGroupMembersOfPlan</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Name</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.sirenum__Client__r.Plan_Code__r.Name</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Group</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetGroupMembersOfPlan</name>
        <label>GetGroupMembersOfPlan</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>HasGroupMembers</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>GroupId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetGroupForPlanCode.Id</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>false</getFirstRecordOnly>
        <object>GroupMember</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <start>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <object>sirenum__ProActiveContract__c</object>
        <recordTriggerType>Create</recordTriggerType>
        <scheduledPaths>
            <name>Upcoming_Expiry_30_days</name>
            <connector>
                <targetReference>GetGroupForPlanCode</targetReference>
            </connector>
            <label>Upcoming Expiry 30 days</label>
            <maxBatchSize>20</maxBatchSize>
            <offsetNumber>150</offsetNumber>
            <offsetUnit>Days</offsetUnit>
            <recordField>Approved_Date__c</recordField>
            <timeSource>RecordField</timeSource>
        </scheduledPaths>
        <triggerType>RecordAfterSave</triggerType>
    </start>
    <status>Active</status>
    <textTemplates>
        <name>NotificationBody</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;{!$Record.Name} is expiring in 30 days, please review and make sure this contract is still relevant to continue, should end or requires a new contract to reflect any changes. &lt;/p&gt;</text>
    </textTemplates>
    <textTemplates>
        <name>NotificationSubject</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;Contract expiry upcoming&lt;/p&gt;</text>
    </textTemplates>
    <transforms>
        <name>buildRecipientList</name>
        <label>buildRecipientList</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>HasActiveUsers</targetReference>
        </connector>
        <dataType>String</dataType>
        <isCollection>true</isCollection>
        <scale>0</scale>
        <storeOutputAutomatically>true</storeOutputAutomatically>
        <transformValues>
            <transformValueActions>
                <transformType>Map</transformType>
                <value>
                    <elementReference>GetActiveUserIds[$EachItem].Id</elementReference>
                </value>
            </transformValueActions>
        </transformValues>
    </transforms>
    <transforms>
        <name>GetUserIdsFromGroupMembers</name>
        <label>GetUserIdsFromGroupMembers</label>
        <locationX>0</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>GetActiveUserIds</targetReference>
        </connector>
        <dataType>String</dataType>
        <isCollection>true</isCollection>
        <scale>0</scale>
        <storeOutputAutomatically>true</storeOutputAutomatically>
        <transformValues>
            <transformValueActions>
                <transformType>Map</transformType>
                <value>
                    <elementReference>GetGroupMembersOfPlan[$EachItem].UserOrGroupId</elementReference>
                </value>
            </transformValueActions>
        </transformValues>
    </transforms>
</Flow>
